ggplot(data = flights, mapping = aes(x = carrier, y = arr_delay,ymin = low, ymax = high, group = carrier)) +
geom_boxplot()
library(tidyverse)
library(lubridate)
library(nycflights13)
# Q1-3
carrier_delay <- flights %>% group_by(carrier) %>%
summarise(avg_delay=mean(arr_delay,na.rm = TRUE),
sd_delay= sd(arr_delay,na.rm = TRUE),
high=avg_delay+sd_delay,
low = avg_delay-sd_delay)
ggplot(data = flights, mapping = aes(x = carrier, y = arr_delay,ymin = low, ymax = high, group = carrier)) +
geom_boxplot()
ggplot(data = flights, mapping = aes(x = carrier, y = arr_delay,ymin = -100, ymax =100, group = carrier)) +
geom_boxplot()
ggplot(data = flights, mapping = aes(x = carrier, y = arr_delay,ylim(-100,100), group = carrier)) +
geom_boxplot()
ggplot(data = flights, mapping = aes(x = carrier, y = arr_delay, group = carrier)) +
geom_boxplot(ylim(-100,100))
ggplot(data = flights, mapping = aes(x = carrier, y = arr_delay, group = carrier)) +
geom_boxplot(mapping = aes(ylim(-100,100)))
ggplot(data = flights, mapping = aes(x = carrier, y = arr_delay, group = carrier)) +
geom_boxplot(mapping = aes(ylim = (-100,100)))
ggplot(data = flights, mapping = aes(x = carrier, y = arr_delay, group = carrier)) +
geom_boxplot(mapping = aes(ylim(-100,100)))
ggplot(data = flights) +
geom_boxplot(mapping = aes(x = carrier, y = arr_delay,ylim(-100,100)))
ggplot(data = flights) +
geom_boxplot(mapping = aes(x = carrier, y = arr_delay))
ggplot(data = flights) +
geom_boxplot(mapping = aes(x = carrier, y = arr_delay, ymin = -100, ymax = 100))
ggplot(data = flights) +
geom_boxplot(mapping = aes(x = carrier, y = arr_delay, ylim = c(-100, 100)))
ggplot(data = flights) +
geom_boxplot(mapping = aes(x = carrier, y = arr_delay))
ggplot(data = flights) +
geom_boxplot(mapping = aes(x = carrier, y = arr_delay)) +
coord_cartesian(ylim = c(-100, 100))
library(tidyverse)
library(lubridate)
library(nycflights13)
weather2 <- weather %>%
filter(!(year == 2013 & month == 11 & day==3 & hour==1 & wind_dir != 310)) %>%
select(origin, temp, dewp, humid, wind_dir, wind_speed, precip, pressure, time_hour)
flight_weather <- flights %>%
left_join(weather2, by = c("origin", "time_hour" )) %>%
select(- arr_time, -sched_arr_time, -arr_delay, -flight, -tailnum, -distance)
flight_weather <- flight_weather[complete.cases( flight_weather), ]
num_rows <- nrow(flight_weather)
seq_vector <- seq(1,num_rows,by=1)
sample_size  <- floor(0.75* num_rows)
train_index <-  sample(seq_vector,sample_size)
set.seed(1234)
train_df <- flight_weather %>% slice(train_index)
remaining <- setdiff(seq_vector,train_index)
test_df <- flight_weather %>% slice(remaining)
# Q2-3
mod1 <- lm(dep_delay ~ temp + dewp + humid + wind_speed + pressure, data = train_df)
train_pred <- predict(mod1, type = "response")
train_e <- train_df$dep_delay - train_pred
train_mse <- mean(train_e ^ 2)
# Q2-4
test_pred <- predict(mod1,type ="response",newdata = test_df)
test_e <- test_df$dep_delay - test_pred
test_mse <- mean(test_e ^ 2)
coeff <- mod1$coefficients
pred_sd <- summary(mod1)$coefficients[,2]
effects <- coeff * pred_sd
effects <- effects[-1]
temp_effect <- effects[1]
humid_effect <- effects[3]
wind_speed_effect <- effects[4]
pressure_effect <- effects[5]
max <- max(effects)
cor(train_df %>% select(temp,dewp,humid,wind_speed,pressure))
mod2 <- lm(dep_delay ~ poly(temp,humid,wind_speed,pressure,degree = 2), data = train_df)
train2_pred <- predict(mod2, type = "response")
train2_e <- train_df$dep_delay - train2_pred
train2_mse <- mean(train2_e ^ 2)
test2_pred <- predict(mod2,type ="response",newdata = test_df)
test2_e <- test_df$dep_delay - test2_pred
test2_mse <- mean(test2_e ^ 2)
train2_mse > train_mse
test2_mse > test_mse
setwd("~/Desktop/OM420_Project")
library(tidyverse)
library(ggplot2)
test <- read.csv("data.csv")
sts <- test %>% group_by(Make,Model,Year,Transmission.Type)%>% filter( Transmission.Type %in% c("AUTOMATIC","MANUAL"))%>% summarise(highway.MPG,city.mpg,count = n()) %>% unique()
asd <- test %>% group_by(Make,Model,Year) %>% filter( Transmission.Type %in% c("AUTOMATIC","MANUAL"))%>% summarise(count =  n_distinct(Transmission.Type)) %>% filter(count > 1)
sts <- inner_join(asd,sts, c("Make","Model","Year"))
sum <- sts %>% group_by(Make,Model,Year,Transmission.Type) %>% summarise(avgHMPG = mean(highway.MPG),avgCMPG = mean(city.mpg))
sum
old_cars <- sum %>% filter(Year <1994, Transmission.Type %in% c("AUTOMATIC","MANUAL","AUTOMATED_MANUAL")) %>% arrange(Year)
old_cars %>% ggplot(data = .) + geom_bar(aes(x = Model,y = avgHMPG, fill=Transmission.Type), stat = "identity",position = "dodge",width = 0.4)
millenium_cars <- sum %>% filter(Year <=2005, Year >=2004,Transmission.Type %in% c("AUTOMATIC","MANUAL")) %>% arrange(Year)
millenium_cars %>% ggplot(data = .) + geom_bar(aes(x = Model,y = avgHMPG, fill=Transmission.Type), stat = "identity",position = "dodge",width = 0.4)
new_cars <- sum %>% filter(Year ==2017,Transmission.Type %in% c("AUTOMATIC","MANUAL")) %>% arrange(Year)
new_cars_sample <- new_cars[1:32,]
new_cars_sample %>% ggplot(data = .) + geom_bar(aes(x = Model,y = avgHMPG, fill=Transmission.Type), stat = "identity",position = "dodge",width = 0.4)
asdf <- sum %>% group_by(Model) %>% summarize(count = n_distinct(Year)) %>% filter(count == 3)
proportion <- old_cars %>% group_by(Make,Model,Year) %>% summarize(highwayDiff = diff(avgHMPG), cityDiff = diff(avgCMPG)) %>% mutate(mostEfficientH = ifelse(highwayDiff < 0, "Auto","Man"))
#
count = c(length(which(proportion$mostEfficientH == "Auto")),length(which(proportion$mostEfficientH == "Man")) )
label = c("Auto","Man")
pct <- round(count/sum(count)*100)
label <- paste(label, pct) # add percents to labels
label <- paste(label,"% ",sep="") # ad % to labels
label <- paste(label,"(",sep="") # ad % to labels
label <- paste(label,count,sep="") # ad % to labels
label <- paste(label,")",sep="") # ad % to labels
count %>% pie(labels = label, main="Which drivetrain is more efficient for cars from 1990-94?")
proportion <- millenium_cars %>% group_by(Make,Model,Year) %>% summarize(highwayDiff = diff(avgHMPG), cityDiff = diff(avgCMPG)) %>% mutate(mostEfficientH = ifelse(highwayDiff < 0, "Auto","Man"))
#If automatic is more efficient than manual than diff is negative, otherwise vice versa
count = c(length(which(proportion$mostEfficientH == "Auto")),length(which(proportion$mostEfficientH == "Man")) )
label = c("Auto","Man")
pct <- round(count/sum(count)*100)
label <- paste(label, pct) # add percents to labels
label <- paste(label,"% ",sep="") # ad % to labels
label <- paste(label,"(",sep="") # ad % to labels
label <- paste(label,count,sep="") # ad % to labels
label <- paste(label,")",sep="") # ad % to labels
count %>% pie(labels = label, main="Which drivetrain is more efficient for cars from 2004-05?")
proportion <- new_cars %>% group_by(Make,Model,Year) %>% summarize(highwayDiff = diff(avgHMPG), cityDiff = diff(avgCMPG)) %>% mutate(mostEfficientH = ifelse(highwayDiff < 0, "Auto","Man"))
#If automatic is more efficient than manual than diff is negative, otherwise vice versa
count = c(length(which(proportion$mostEfficientH == "Auto")),length(which(proportion$mostEfficientH == "Man")) )
label = c("Auto","Man")
pct <- round(count/sum(count)*100)
label <- paste(label, pct) # add percents to labels
label <- paste(label,"% ",sep="") # ad % to labels
label <- paste(label,"(",sep="") # ad % to labels
label <- paste(label,count,sep="") # ad % to labels
label <- paste(label,")",sep="") # ad % to labels
count %>% pie(labels = label, main="Which drivetrain is more efficient for cars from 2017?")
all_cars <- sum %>% filter(Transmission.Type %in% c("AUTOMATIC","MANUAL")) %>% arrange(Year)
proportion <- all_cars %>% group_by(Year,Transmission.Type) %>% summarise(avgHMPG = mean(avgHMPG),avgCMPG = mean(avgCMPG))
proportion %>% ggplot(data = .) + geom_point(mapping = aes(x = Year, y = avgHMPG, color = Transmission.Type)) + geom_line(mapping = aes(x = Year, y = avgHMPG, color = Transmission.Type))#If automatic is more efficient than manual than diff is negative, otherwise vice versa
all_cars <- sum %>% filter(Transmission.Type %in% c("AUTOMATIC","MANUAL")) %>% arrange(Year)
proportion <- all_cars %>% group_by(Year,Transmission.Type) %>% summarise(avgHMPG = mean(avgHMPG),avgCMPG = mean(avgCMPG))
proportion %>% ggplot(data = .) + geom_point(mapping = aes(x = Year, y = avgHMPG, color = Transmission.Type)) + geom_line(mapping = aes(x = Year, y = avgHMPG, color = Transmission.Type))#If automatic is more efficient than manual than diff is negative, otherwise vice versa
test <- read.csv("data.csv")
# Changing spaces to underscores in the Make column. Gives error during left join
# without this step. If this messes up other things let me know.
test$Make <- sub(" ", "_", test$Make)
sts <- test %>% group_by(Make,Model,Year,Transmission.Type)%>% filter( Transmission.Type %in% c("AUTOMATIC","MANUAL"))%>% summarise(highway.MPG,city.mpg,count = n()) %>% unique()
asd <- test %>% group_by(Make,Model,Year) %>% filter( Transmission.Type %in% c("AUTOMATIC","MANUAL"))%>% summarise(count =  n_distinct(Transmission.Type)) %>% filter(count > 1)
sts <- inner_join(asd,sts, c("Make","Model","Year"))
sum <- sts %>% group_by(Make,Model,Year,Transmission.Type) %>% summarise(avgHMPG = mean(highway.MPG),avgCMPG = mean(city.mpg))
#Compare older cars here: 1990-94
old_cars <- sum %>% filter(Year <1994, Transmission.Type %in% c("AUTOMATIC","MANUAL","AUTOMATED_MANUAL")) %>% arrange(Year)
old_cars %>% ggplot(data = .) + geom_bar(aes(x = Model,y = avgHMPG, fill=Transmission.Type), stat = "identity",position = "dodge",width = 0.4)
#Compare millennium cars here: 2000-2005
millenium_cars <- sum %>% filter(Year <=2005, Year >=2004,Transmission.Type %in% c("AUTOMATIC","MANUAL")) %>% arrange(Year)
millenium_cars %>% ggplot(data = .) + geom_bar(aes(x = Model,y = avgHMPG, fill=Transmission.Type), stat = "identity",position = "dodge",width = 0.4)
#Compare latest cars here: 2016-2017
new_cars <- sum %>% filter(Year ==2017,Transmission.Type %in% c("AUTOMATIC","MANUAL")) %>% arrange(Year)
new_cars_sample <- new_cars[1:32,]
new_cars_sample %>% ggplot(data = .) + geom_bar(aes(x = Model,y = avgHMPG, fill=Transmission.Type), stat = "identity",position = "dodge",width = 0.4)
asdf <- sum %>% group_by(Model) %>% summarize(count = n_distinct(Year)) %>% filter(count == 3)
proportion <- old_cars %>% group_by(Make,Model,Year) %>% summarize(highwayDiff = diff(avgHMPG), cityDiff = diff(avgCMPG)) %>% mutate(mostEfficientH = ifelse(highwayDiff < 0, "Auto","Man"))
#If automatic is more efficient than manual than diff is negative, otherwise vice versa
count = c(length(which(proportion$mostEfficientH == "Auto")),length(which(proportion$mostEfficientH == "Man")) )
label = c("Auto","Man")
pct <- round(count/sum(count)*100)
label <- paste(label, pct) # add percents to labels
label <- paste(label,"% ",sep="") # ad % to labels
label <- paste(label,"(",sep="") # ad % to labels
label <- paste(label,count,sep="") # ad % to labels
label <- paste(label,")",sep="") # ad % to labels
count %>% pie(labels = label, main="Which drivetrain is more efficient for cars from 1990-94?")
proportion <- millenium_cars %>% group_by(Make,Model,Year) %>% summarize(highwayDiff = diff(avgHMPG), cityDiff = diff(avgCMPG)) %>% mutate(mostEfficientH = ifelse(highwayDiff < 0, "Auto","Man"))
#If automatic is more efficient than manual than diff is negative, otherwise vice versa
count = c(length(which(proportion$mostEfficientH == "Auto")),length(which(proportion$mostEfficientH == "Man")) )
label = c("Auto","Man")
pct <- round(count/sum(count)*100)
label <- paste(label, pct) # add percents to labels
label <- paste(label,"% ",sep="") # ad % to labels
label <- paste(label,"(",sep="") # ad % to labels
label <- paste(label,count,sep="") # ad % to labels
label <- paste(label,")",sep="") # ad % to labels
count %>% pie(labels = label, main="Which drivetrain is more efficient for cars from 2004-05?")
proportion <- new_cars %>% group_by(Make,Model,Year) %>% summarize(highwayDiff = diff(avgHMPG), cityDiff = diff(avgCMPG)) %>% mutate(mostEfficientH = ifelse(highwayDiff < 0, "Auto","Man"))
#If automatic is more efficient than manual than diff is negative, otherwise vice versa
count = c(length(which(proportion$mostEfficientH == "Auto")),length(which(proportion$mostEfficientH == "Man")) )
label = c("Auto","Man")
pct <- round(count/sum(count)*100)
label <- paste(label, pct) # add percents to labels
label <- paste(label,"% ",sep="") # ad % to labels
label <- paste(label,"(",sep="") # ad % to labels
label <- paste(label,count,sep="") # ad % to labels
label <- paste(label,")",sep="") # ad % to labels
count %>% pie(labels = label, main="Which drivetrain is more efficient for cars from 2017?")
all_cars <- sum %>% filter(Transmission.Type %in% c("AUTOMATIC","MANUAL")) %>% arrange(Year)
proportion <- all_cars %>% group_by(Year,Transmission.Type) %>% summarise(avgHMPG = mean(avgHMPG),avgCMPG = mean(avgCMPG))
proportion %>% ggplot(data = .) + geom_point(mapping = aes(x = Year, y = avgHMPG, color = Transmission.Type)) + geom_line(mapping = aes(x = Year, y = avgHMPG, color = Transmission.Type))#If automatic is more efficient than manual than diff is negative, otherwise vice versa
new_cars
# -------------------------- FINDING 2 ----------------------------------------#
# We found the country of origin for each make. Comparing performance of cars
# for different countries on basis of HP, MPG and MSRP
make_country <- read.csv("make_origin_country.csv")
test2 <- test
test2 <- test2 %>% left_join(make_country, by = "Make")
test2 <- test2 %>%
filter(Country %in% c("England","Germany","Italy","Japan","US") & MSRP < 80000 & Year >= 2010)
test2 <- test
test2 <- test2 %>% left_join(make_country, by = "Make")
test2 <- test2 %>%
filter(Country %in% c("England","Germany","Italy","Japan","US") & Year >= 2010)
View(test2)
test2 %>% count(Vehicle.Size)
ggplot(data = test2) +
geom_boxplot(mapping = aes(x = Country, y = Engine.HP)) +
coord_cartesian(ylim = c(100, 600))
ggplot(data = test2) +
geom_boxplot(mapping = aes(x = Country, y = Engine.HP)) +
coord_cartesian(ylim = c(100, 900))
ggplot(data = test2) +
geom_boxplot(mapping = aes(x = Country, y = highway.MPG)) +
coord_cartesian(ylim = c(0, 110))
ggplot(data = test2) +
geom_boxplot(mapping = aes(x = Country, y = MSRP)) +
coord_cartesian(ylim = c(10000, 50000))
ggplot(data = test2) +
geom_boxplot(mapping = aes(x = Country, y = MSRP)) +
coord_cartesian(ylim = c(10000, 5000000))
ggplot(data = test2) +
geom_boxplot(mapping = aes(x = Country, y = MSRP)) +
coord_cartesian(ylim = c(10000, 500000))
ggplot(data = test2) +
geom_boxplot(mapping = aes(x = Country, y = MSRP)) +
coord_cartesian(ylim = c(10000, 700000))
make_country <- read.csv("make_origin_country.csv")
# working on a copy of test
test2 <- test
test2 <- test2 %>% left_join(make_country, by = "Make")
# will also filter out the luxury cars etc
test2 <- test2 %>%
filter(Country %in% c("England","Germany","Italy","Japan","US","South Korea") & Year >= 2010)
ggplot(data = test2) +
geom_boxplot(mapping = aes(x = Country, y = Engine.HP)) +
coord_cartesian(ylim = c(100, 800))
ggplot(data = test2) +
geom_boxplot(mapping = aes(x = Country, y = highway.MPG)) +
coord_cartesian(ylim = c(0, 110))
ggplot(data = test2) +
geom_boxplot(mapping = aes(x = Country, y = MSRP)) +
coord_cartesian(ylim = c(10000, 700000))
make_country <- read.csv("make_origin_country.csv")
# working on a copy of test
test2 <- test
test2 <- test2 %>% left_join(make_country, by = "Make")
# will also filter out the luxury cars, for now limiting MSRP to less  than 100000
test2 <- test2 %>%
filter(Country %in% c("England","Germany","Italy","Japan","US","South Korea") &
Year >= 2010 & MSRP <= 100000)
ggplot(data = test2) +
geom_boxplot(mapping = aes(x = Country, y = Engine.HP)) +
coord_cartesian(ylim = c(100, 800))
ggplot(data = test2) +
geom_boxplot(mapping = aes(x = Country, y = highway.MPG)) +
coord_cartesian(ylim = c(0, 110))
ggplot(data = test2) +
geom_boxplot(mapping = aes(x = Country, y = MSRP)) +
coord_cartesian(ylim = c(10000, 700000))
ggplot(data = test2) +
geom_boxplot(mapping = aes(x = Country, y = MSRP)) +
coord_cartesian(ylim = c(10000, 100000))
raw_data <- read_csv("data.csv")
names(raw_data) <- str_replace(string=names(raw_data), pattern=" ", replacement="_")
separated <- raw_data
grouped <- raw_data %>% group_by(Market_Category) %>% summarise()
while (dim(grouped)[1] != 0) {
category <- str_split(string=grouped$Market_Category[1],pattern=",", simplify=T)[1,1]
separated <- separated %>% mutate("{category}" := str_detect(separated$Market_Category, category))
grouped <- grouped %>% transmute(Market_Category = str_remove(Market_Category, paste(category, ',',sep="")))
grouped <- grouped %>% transmute(Market_Category = str_remove(Market_Category, category))
grouped <- grouped[grouped$Market_Category != "",]
names(separated)
}
separated %>% ggplot() + geom_bar(mapping=aes(x=MSRP), width=100000)
cars_df <- separated[separated$MSRP <= 100000,]
cars_df <- cars_df[cars_df$MSRP > 2000,]
cars_df %>% ggplot() + geom_bar(mapping=aes(x=MSRP), width=1000)
View(cars_df)
raw_data <- read_csv("data.csv")
# Rename columns with spaces
names(raw_data) <- str_replace(string=names(raw_data), pattern=" ", replacement="_")
# Separate multiple market Categories
separated <- raw_data
grouped <- raw_data %>% group_by(Market_Category) %>% summarise()
while (dim(grouped)[1] != 0) {
category <- str_split(string=grouped$Market_Category[1],pattern=",", simplify=T)[1,1]
separated <- separated %>% mutate("{category}" := str_detect(separated$Market_Category, category))
grouped <- grouped %>% transmute(Market_Category = str_remove(Market_Category, paste(category, ',',sep="")))
grouped <- grouped %>% transmute(Market_Category = str_remove(Market_Category, category))
grouped <- grouped[grouped$Market_Category != "",]
names(separated)
}
test <- separated
test$Make <- sub(" ", "_", test$Make)
View(test)
test %>% group_by(`Engine_Fuel Type`) %>% sumarise(avg = mean(MSRP))
test %>% group_by(`Engine_Fuel Type`) %>% summarise(avg = mean(MSRP))
test %>% filter(Exotic == False &`High-Performance` == False)group_by(`Engine_Fuel Type`) %>% summarise(avg = mean(MSRP))
test %>% filter(Exotic == False &`High-Performance` == False) %>%
group_by(`Engine_Fuel Type`) %>% summarise(avg = mean(MSRP))
test %>% filter(Exotic == FALSE &`High-Performance` == FALSE) %>%
group_by(`Engine_Fuel Type`) %>% summarise(avg = mean(MSRP))
raw_data <- read_csv("data.csv")
names(raw_data)
names(raw_data) <- str_replace(string=names(raw_data), pattern=" ", replacement="_")
names(raw_data)
# Rename columns with spaces
names(raw_data) <- str_replace_all(string=names(raw_data), pattern=" ", replacement="_")
names(raw_data)
raw_data <- read_csv("data.csv")
names(raw_data)
# Rename columns with spaces
names(raw_data) <- str_replace_all(string=names(raw_data), pattern=" ", replacement="_")
# Separate multiple market Categories
separated <- raw_data
grouped <- raw_data %>% group_by(Market_Category) %>% summarise()
while (dim(grouped)[1] != 0) {
category <- str_split(string=grouped$Market_Category[1],pattern=",", simplify=T)[1,1]
separated <- separated %>% mutate("{category}" := str_detect(separated$Market_Category, category))
grouped <- grouped %>% transmute(Market_Category = str_remove(Market_Category, paste(category, ',',sep="")))
grouped <- grouped %>% transmute(Market_Category = str_remove(Market_Category, category))
grouped <- grouped[grouped$Market_Category != "",]
names(separated)
}
test <- separated
test$Make <- sub(" ", "_", test$Make)
test %>% filter(Exotic == FALSE &`High-Performance` == FALSE) %>%
group_by(`Engine_Fuel Type`) %>% summarise(avg = mean(MSRP))
make_country <- read.csv("make_origin_country.csv")
# working on a copy of test
test2 <- test
test2 <- test2 %>% left_join(make_country, by = "Make")
View(test2)
names(separated) <- str_replace_all(string=names(separated), pattern=" ", replacement="_")
test <- separated
test$Make <- sub(" ", "_", test$Make)
make_country <- read.csv("make_origin_country.csv")
# working on a copy of test
test2 <- test
test2 <- test2 %>% left_join(make_country, by = "Make")
# will also filter out the luxury cars, for now limiting MSRP to less  than 100000
test2 <- test2 %>%
filter(Country %in% c("England","Germany","Italy","Japan","US","South Korea") &
Exotic == FALSE & Luxury == FALSE & `High-Performance` == FALSE & `Factory_Tuner` == FALSE)
View(test2)
ggplot(data = test2) +
geom_boxplot(mapping = aes(x = Country, y = Engine.HP)) +
coord_cartesian(ylim = c(100, 800))
ggplot(data = test2) +
geom_boxplot(mapping = aes(x = Country, y = Engine_HP)) +
coord_cartesian(ylim = c(100, 800))
ggplot(data = test2) +
geom_boxplot(mapping = aes(x = Country, y = Engine_HP)) +
coord_cartesian(ylim = c(100, 500))
ggplot(data = test2) +
geom_boxplot(mapping = aes(x = Country, y = highway.MPG)) +
coord_cartesian(ylim = c(0, 110))
ggplot(data = test2) +
geom_boxplot(mapping = aes(x = Country, y = highway_MPG)) +
coord_cartesian(ylim = c(0, 110))
ggplot(data = test2) +
geom_boxplot(mapping = aes(x = Country, y = MSRP)) +
coord_cartesian(ylim = c(10000, 100000))
ggplot(data = test2) +
geom_boxplot(mapping = aes(x = Country, y = Engine_HP)) +
coord_cartesian(ylim = c(100, 500))
ggplot(data = test2) +
geom_boxplot(mapping = aes(x = Country, y = highway_MPG)) +
coord_cartesian(ylim = c(0, 110))
ggplot(data = test2) +
geom_boxplot(mapping = aes(x = Country, y = MSRP)) +
coord_cartesian(ylim = c(10000, 75000))
ggplot(data = test2) +
geom_boxplot(mapping = aes(x = Country, y = MSRP)) +
coord_cartesian(ylim = c(1000, 75000))
ggplot(data = test2) +
geom_boxplot(mapping = aes(x = Country, y = MSRP)) +
coord_cartesian(ylim = c(0, 75000))
ggplot(data = test2) +
geom_boxplot(mapping = aes(x = Country, y = Engine_HP)) +
coord_cartesian(ylim = c(0, 500))
ggplot(data = test2) +
geom_boxplot(mapping = aes(x = Country, y = Engine_HP)) +
coord_cartesian(ylim = c(0, 500))
ggplot(data = test2) +
geom_boxplot(mapping = aes(x = Country, y = highway_MPG)) +
coord_cartesian(ylim = c(0, 110))
ggplot(data = test2) +
geom_boxplot(mapping = aes(x = Country, y = highway_MPG)) +
coord_cartesian(ylim = c(0, 110))
ggplot(data = test2) +
geom_boxplot(mapping = aes(x = Country, y = MSRP)) +
coord_cartesian(ylim = c(0, 75000))
ggplot(data = test2) +
geom_boxplot(mapping = aes(x = Country, y = Popularity)) +
coord_cartesian(ylim = c(0, 75000))
ggplot(data = test2) +
geom_boxplot(mapping = aes(x = Country, y = Popularity)) +
coord_cartesian(ylim = c(0, 1000))
ggplot(data = test2) +
geom_boxplot(mapping = aes(x = Country, y = Popularity)) +
coord_cartesian(ylim = c(0, 10000))
ggplot(data = test2) +
geom_boxplot(mapping = aes(x = Country, y = Popularity)) +
coord_cartesian(ylim = c(0, 5000))
make_country <- read.csv("make_origin_country.csv")
# working on a copy of test
test2 <- test
test2 <- test2 %>% left_join(make_country, by = "Make")
ggplot(data = test2) +
geom_boxplot(mapping = aes(x = Country, y = Engine_HP)) +
coord_cartesian(ylim = c(0, 500))
make_country <- read.csv("make_origin_country.csv")
# working on a copy of test
test2 <- test
test2 <- test2 %>% left_join(make_country, by = "Make")
# filter out the luxury,high performace, Exotic and Factory tuned cars to get a
# better estimate for mid-range cars.
test2 <- test2 %>%
filter(Country %in% c("England","Germany","Italy","Japan","US","South Korea") &
Exotic == FALSE & Luxury == FALSE & `High-Performance` == FALSE & `Factory_Tuner` == FALSE)
ggplot(data = test2) +
geom_boxplot(mapping = aes(x = Country, y = Engine_HP)) +
coord_cartesian(ylim = c(0, 500))
ggplot(data = test2) +
geom_boxplot(mapping = aes(x = Country, y = highway_MPG)) +
coord_cartesian(ylim = c(0, 110))
ggplot(data = test2) +
geom_boxplot(mapping = aes(x = Country, y = MSRP)) +
coord_cartesian(ylim = c(0, 75000))
test2 %>% filter(Country == "Italy")
ggplot(data = test2) +
geom_boxplot(mapping = aes(x = Country, y = log10(MSRP))) +
coord_cartesian(ylim = c(0, 75000))
ggplot(data = test2) +
geom_boxplot(mapping = aes(x = Country, y = log2(MSRP))) +
coord_cartesian(ylim = c(0, 75000))
ggplot(data = test2) +
geom_boxplot(mapping = aes(x = Country, y = log(MSRP))) +
coord_cartesian(ylim = c(0, 75000))
ggplot(data = test2) +
geom_boxplot(mapping = aes(x = Country, y = log(MSRP))) +
coord_cartesian(ylim = c(0, 100))
ggplot(data = test2) +
geom_boxplot(mapping = aes(x = Country, y = log(MSRP))) +
coord_cartesian(ylim = c(0, 25))
ggplot(data = test2) +
geom_boxplot(mapping = aes(x = Country, y = log(MSRP))) +
coord_cartesian(ylim = c(0, 12))
ggplot(data = test2) +
geom_boxplot(mapping = aes(x = Country, y = log(MSRP))) +
coord_cartesian(ylim = c(7.5, 12))
ggplot(data = test2) +
geom_point(mapping = aes(x = Country, y = (MSRP)))
ggplot(data = test2) +
geom_point(mapping = aes(x = Year, y = (MSRP)))
# filter out the luxury,high performace, Exotic and Factory tuned cars to get a
# better estimate for mid-range cars.
test2 <- test2 %>%
filter(Country %in% c("England","Germany","Italy","Japan","US","South Korea") &
Exotic == FALSE & Luxury == FALSE & `High-Performance` == FALSE &
`Factory_Tuner` == FALSE & Year >= 2010)
ggplot(data = test2) +
geom_boxplot(mapping = aes(x = Country, y = Engine_HP)) +
coord_cartesian(ylim = c(0, 500))
ggplot(data = test2) +
geom_boxplot(mapping = aes(x = Country, y = highway_MPG)) +
coord_cartesian(ylim = c(0, 110))
ggplot(data = test2) +
geom_boxplot(mapping = aes(x = Country, y = log(MSRP))) +
coord_cartesian(ylim = c(7.5, 12))
make_country <- read.csv("make_origin_country.csv")
# working on a copy of test
test2 <- test
test2 <- test2 %>% left_join(make_country, by = "Make")
test2 <- test2 %>%
filter(Country %in% c("England","Germany","Italy","Japan","US","South Korea") &
Exotic == FALSE & Luxury == FALSE & `High-Performance` == FALSE &
`Factory_Tuner` == FALSE & Year >= 2010 & !is.na(highway_MPG))
ggplot(data = test2) +
geom_boxplot(mapping = aes(x = Country, y = highway_MPG)) +
coord_cartesian(ylim = c(0, 110))
ggplot(data = test2) +
geom_boxplot(mapping = aes(x = Country, y = log(MSRP))) +
coord_cartesian(ylim = c(7.5, 12))
library(ggpubr)
install.packages("ggpubr")
install.packages("ggpubr")
install.packages("ggpubr")
install.packages("ggpubr")
install.packages("ggpubr")
library(ggpubr)
library(ggplot2)
ggqqplot(my_data$len)
set.seed(0)
msrp <- test2$MSRP
hist(msrp, col='steelblue', main='Normal')
msrp <- test2$MSRP
msrp <- log(msrp)
hist(msrp, col='steelblue', main='Normal')
ggplot(data = test2) +
geom_boxplot(mapping = aes(x = Country, y = log(MSRP))) +
coord_cartesian(ylim = c(7.5, 12))
library(tidyverse)
#https://www.kaggle.com/datasets/CooperUnion/cardataset\
library(tidyverse)
